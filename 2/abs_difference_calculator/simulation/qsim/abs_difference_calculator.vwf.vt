// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/25/2018 01:42:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    abs_difference_calculator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module abs_difference_calculator_vlg_sample_tst(
	a0,
	a1,
	a2,
	a3,
	a4,
	a5,
	b0,
	b1,
	b2,
	b3,
	b4,
	b5,
	sampler_tx
);
input [4:0] a0;
input [4:0] a1;
input [4:0] a2;
input [4:0] a3;
input [4:0] a4;
input [4:0] a5;
input [4:0] b0;
input [4:0] b1;
input [4:0] b2;
input [4:0] b3;
input [4:0] b4;
input [4:0] b5;
output sampler_tx;

reg sample;
time current_time;
always @(a0 or a1 or a2 or a3 or a4 or a5 or b0 or b1 or b2 or b3 or b4 or b5)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module abs_difference_calculator_vlg_check_tst (
	abs_diff,
	sampler_rx
);
input [0:7] abs_diff;
input sampler_rx;

reg [0:7] abs_diff_expected;

reg [0:7] abs_diff_prev;

reg [0:7] abs_diff_expected_prev;

reg [0:7] last_abs_diff_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	abs_diff_prev = abs_diff;
end

// update expected /o prevs

always @(trigger)
begin
	abs_diff_expected_prev = abs_diff_expected;
end


// expected abs_diff[ 7 ]
initial
begin
	abs_diff_expected[7] = 1'bX;
end 
// expected abs_diff[ 6 ]
initial
begin
	abs_diff_expected[6] = 1'bX;
end 
// expected abs_diff[ 5 ]
initial
begin
	abs_diff_expected[5] = 1'bX;
end 
// expected abs_diff[ 4 ]
initial
begin
	abs_diff_expected[4] = 1'bX;
end 
// expected abs_diff[ 3 ]
initial
begin
	abs_diff_expected[3] = 1'bX;
end 
// expected abs_diff[ 2 ]
initial
begin
	abs_diff_expected[2] = 1'bX;
end 
// expected abs_diff[ 1 ]
initial
begin
	abs_diff_expected[1] = 1'bX;
end 
// expected abs_diff[ 0 ]
initial
begin
	abs_diff_expected[0] = 1'bX;
end 
// generate trigger
always @(abs_diff_expected or abs_diff)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected abs_diff = %b | ",abs_diff_expected_prev);
	$display("| real abs_diff = %b | ",abs_diff_prev);
`endif
	if (
		( abs_diff_expected_prev[0] !== 1'bx ) && ( abs_diff_prev[0] !== abs_diff_expected_prev[0] )
		&& ((abs_diff_expected_prev[0] !== last_abs_diff_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abs_diff[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abs_diff_expected_prev);
		$display ("     Real value = %b", abs_diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_abs_diff_exp[0] = abs_diff_expected_prev[0];
	end
	if (
		( abs_diff_expected_prev[1] !== 1'bx ) && ( abs_diff_prev[1] !== abs_diff_expected_prev[1] )
		&& ((abs_diff_expected_prev[1] !== last_abs_diff_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abs_diff[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abs_diff_expected_prev);
		$display ("     Real value = %b", abs_diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_abs_diff_exp[1] = abs_diff_expected_prev[1];
	end
	if (
		( abs_diff_expected_prev[2] !== 1'bx ) && ( abs_diff_prev[2] !== abs_diff_expected_prev[2] )
		&& ((abs_diff_expected_prev[2] !== last_abs_diff_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abs_diff[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abs_diff_expected_prev);
		$display ("     Real value = %b", abs_diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_abs_diff_exp[2] = abs_diff_expected_prev[2];
	end
	if (
		( abs_diff_expected_prev[3] !== 1'bx ) && ( abs_diff_prev[3] !== abs_diff_expected_prev[3] )
		&& ((abs_diff_expected_prev[3] !== last_abs_diff_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abs_diff[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abs_diff_expected_prev);
		$display ("     Real value = %b", abs_diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_abs_diff_exp[3] = abs_diff_expected_prev[3];
	end
	if (
		( abs_diff_expected_prev[4] !== 1'bx ) && ( abs_diff_prev[4] !== abs_diff_expected_prev[4] )
		&& ((abs_diff_expected_prev[4] !== last_abs_diff_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abs_diff[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abs_diff_expected_prev);
		$display ("     Real value = %b", abs_diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_abs_diff_exp[4] = abs_diff_expected_prev[4];
	end
	if (
		( abs_diff_expected_prev[5] !== 1'bx ) && ( abs_diff_prev[5] !== abs_diff_expected_prev[5] )
		&& ((abs_diff_expected_prev[5] !== last_abs_diff_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abs_diff[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abs_diff_expected_prev);
		$display ("     Real value = %b", abs_diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_abs_diff_exp[5] = abs_diff_expected_prev[5];
	end
	if (
		( abs_diff_expected_prev[6] !== 1'bx ) && ( abs_diff_prev[6] !== abs_diff_expected_prev[6] )
		&& ((abs_diff_expected_prev[6] !== last_abs_diff_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abs_diff[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abs_diff_expected_prev);
		$display ("     Real value = %b", abs_diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_abs_diff_exp[6] = abs_diff_expected_prev[6];
	end
	if (
		( abs_diff_expected_prev[7] !== 1'bx ) && ( abs_diff_prev[7] !== abs_diff_expected_prev[7] )
		&& ((abs_diff_expected_prev[7] !== last_abs_diff_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abs_diff[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abs_diff_expected_prev);
		$display ("     Real value = %b", abs_diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_abs_diff_exp[7] = abs_diff_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module abs_difference_calculator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] a0;
reg [4:0] a1;
reg [4:0] a2;
reg [4:0] a3;
reg [4:0] a4;
reg [4:0] a5;
reg [4:0] b0;
reg [4:0] b1;
reg [4:0] b2;
reg [4:0] b3;
reg [4:0] b4;
reg [4:0] b5;
// wires                                               
wire [0:7] abs_diff;

wire sampler;                             

// assign statements (if any)                          
abs_difference_calculator i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.abs_diff(abs_diff),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.b5(b5)
);
// a0[ 4 ]
initial
begin
	a0[4] = 1'b0;
	a0[4] = #400000 1'b1;
	a0[4] = #240000 1'b0;
	a0[4] = #240000 1'b1;
end 
// a0[ 3 ]
initial
begin
	a0[3] = 1'b0;
	a0[3] = #160000 1'b1;
	a0[3] = #80000 1'b0;
	a0[3] = #80000 1'b1;
	a0[3] = #160000 1'b0;
	a0[3] = #240000 1'b1;
	a0[3] = #80000 1'b0;
	a0[3] = #160000 1'b1;
end 
// a0[ 2 ]
initial
begin
	a0[2] = 1'b0;
	a0[2] = #160000 1'b1;
	a0[2] = #80000 1'b0;
	a0[2] = #80000 1'b1;
	a0[2] = #80000 1'b0;
	a0[2] = #80000 1'b1;
	a0[2] = #80000 1'b0;
	a0[2] = #240000 1'b1;
	a0[2] = #80000 1'b0;
	a0[2] = #80000 1'b1;
end 
// a0[ 1 ]
initial
begin
	a0[1] = 1'b0;
	a0[1] = #160000 1'b1;
	a0[1] = #240000 1'b0;
	a0[1] = #240000 1'b1;
	a0[1] = #160000 1'b0;
end 
// a0[ 0 ]
initial
begin
	a0[0] = 1'b0;
	a0[0] = #80000 1'b1;
	a0[0] = #240000 1'b0;
	a0[0] = #240000 1'b1;
	a0[0] = #160000 1'b0;
	a0[0] = #80000 1'b1;
	a0[0] = #80000 1'b0;
	a0[0] = #80000 1'b1;
end 
// a1[ 4 ]
initial
begin
	a1[4] = 1'b0;
	a1[4] = #560000 1'b1;
	a1[4] = #80000 1'b0;
	a1[4] = #80000 1'b1;
	a1[4] = #160000 1'b0;
	a1[4] = #80000 1'b1;
end 
// a1[ 3 ]
initial
begin
	a1[3] = 1'b0;
	a1[3] = #160000 1'b1;
	a1[3] = #160000 1'b0;
	a1[3] = #320000 1'b1;
	a1[3] = #80000 1'b0;
	a1[3] = #80000 1'b1;
	a1[3] = #160000 1'b0;
end 
// a1[ 2 ]
initial
begin
	a1[2] = 1'b0;
	a1[2] = #160000 1'b1;
	a1[2] = #160000 1'b0;
	a1[2] = #80000 1'b1;
	a1[2] = #160000 1'b0;
	a1[2] = #80000 1'b1;
	a1[2] = #80000 1'b0;
	a1[2] = #160000 1'b1;
	a1[2] = #80000 1'b0;
end 
// a1[ 1 ]
initial
begin
	a1[1] = 1'b0;
	a1[1] = #80000 1'b1;
	a1[1] = #240000 1'b0;
	a1[1] = #80000 1'b1;
	a1[1] = #80000 1'b0;
	a1[1] = #240000 1'b1;
	a1[1] = #160000 1'b0;
	a1[1] = #80000 1'b1;
end 
// a1[ 0 ]
initial
begin
	a1[0] = 1'b0;
	a1[0] = #80000 1'b1;
	a1[0] = #240000 1'b0;
	a1[0] = #240000 1'b1;
	a1[0] = #160000 1'b0;
	a1[0] = #80000 1'b1;
	a1[0] = #160000 1'b0;
end 
// a2[ 4 ]
initial
begin
	a2[4] = 1'b0;
	a2[4] = #80000 1'b1;
	a2[4] = #80000 1'b0;
	a2[4] = #80000 1'b1;
	a2[4] = #160000 1'b0;
	a2[4] = #80000 1'b1;
	a2[4] = #80000 1'b0;
	a2[4] = #160000 1'b1;
	a2[4] = #80000 1'b0;
	a2[4] = #80000 1'b1;
	a2[4] = #80000 1'b0;
end 
// a2[ 3 ]
initial
begin
	a2[3] = 1'b0;
	a2[3] = #80000 1'b1;
	a2[3] = #160000 1'b0;
	a2[3] = #80000 1'b1;
	a2[3] = #240000 1'b0;
	a2[3] = #80000 1'b1;
	a2[3] = #240000 1'b0;
	a2[3] = #80000 1'b1;
end 
// a2[ 2 ]
initial
begin
	a2[2] = 1'b0;
	a2[2] = #160000 1'b1;
	a2[2] = #80000 1'b0;
	a2[2] = #560000 1'b1;
	a2[2] = #160000 1'b0;
end 
// a2[ 1 ]
initial
begin
	a2[1] = 1'b0;
	a2[1] = #160000 1'b1;
	a2[1] = #320000 1'b0;
	a2[1] = #160000 1'b1;
	a2[1] = #80000 1'b0;
	a2[1] = #160000 1'b1;
	a2[1] = #80000 1'b0;
end 
// a2[ 0 ]
initial
begin
	a2[0] = 1'b0;
	a2[0] = #160000 1'b1;
	a2[0] = #80000 1'b0;
	a2[0] = #80000 1'b1;
	a2[0] = #240000 1'b0;
	a2[0] = #400000 1'b1;
end 
// a3[ 4 ]
initial
begin
	a3[4] = 1'b0;
	a3[4] = #160000 1'b1;
	a3[4] = #80000 1'b0;
	a3[4] = #160000 1'b1;
	a3[4] = #240000 1'b0;
	a3[4] = #240000 1'b1;
end 
// a3[ 3 ]
initial
begin
	a3[3] = 1'b0;
	a3[3] = #80000 1'b1;
	a3[3] = #80000 1'b0;
	a3[3] = #160000 1'b1;
	a3[3] = #160000 1'b0;
	a3[3] = #240000 1'b1;
	a3[3] = #80000 1'b0;
	a3[3] = #160000 1'b1;
end 
// a3[ 2 ]
initial
begin
	a3[2] = 1'b0;
	a3[2] = #320000 1'b1;
	a3[2] = #80000 1'b0;
	a3[2] = #80000 1'b1;
	a3[2] = #80000 1'b0;
	a3[2] = #240000 1'b1;
	a3[2] = #80000 1'b0;
	a3[2] = #80000 1'b1;
end 
// a3[ 1 ]
initial
begin
	a3[1] = 1'b0;
	a3[1] = #80000 1'b1;
	a3[1] = #80000 1'b0;
	a3[1] = #80000 1'b1;
	a3[1] = #160000 1'b0;
	a3[1] = #240000 1'b1;
	a3[1] = #160000 1'b0;
end 
// a3[ 0 ]
initial
begin
	a3[0] = 1'b0;
	a3[0] = #80000 1'b1;
	a3[0] = #80000 1'b0;
	a3[0] = #80000 1'b1;
	a3[0] = #80000 1'b0;
	a3[0] = #240000 1'b1;
	a3[0] = #160000 1'b0;
	a3[0] = #80000 1'b1;
	a3[0] = #80000 1'b0;
	a3[0] = #80000 1'b1;
end 
// a4[ 4 ]
initial
begin
	a4[4] = 1'b0;
	a4[4] = #80000 1'b1;
	a4[4] = #160000 1'b0;
	a4[4] = #80000 1'b1;
	a4[4] = #80000 1'b0;
	a4[4] = #80000 1'b1;
	a4[4] = #160000 1'b0;
	a4[4] = #80000 1'b1;
	a4[4] = #80000 1'b0;
	a4[4] = #80000 1'b1;
end 
// a4[ 3 ]
initial
begin
	a4[3] = 1'b0;
	a4[3] = #320000 1'b1;
	a4[3] = #80000 1'b0;
	a4[3] = #80000 1'b1;
	a4[3] = #80000 1'b0;
	a4[3] = #80000 1'b1;
	a4[3] = #320000 1'b0;
end 
// a4[ 2 ]
initial
begin
	a4[2] = 1'b0;
	a4[2] = #80000 1'b1;
	a4[2] = #80000 1'b0;
	a4[2] = #160000 1'b1;
	a4[2] = #80000 1'b0;
	a4[2] = #240000 1'b1;
	a4[2] = #80000 1'b0;
	a4[2] = #160000 1'b1;
	a4[2] = #80000 1'b0;
end 
// a4[ 1 ]
initial
begin
	a4[1] = 1'b0;
	a4[1] = #240000 1'b1;
	a4[1] = #160000 1'b0;
end 
// a4[ 0 ]
initial
begin
	a4[0] = 1'b0;
	a4[0] = #240000 1'b1;
	a4[0] = #320000 1'b0;
	a4[0] = #160000 1'b1;
	a4[0] = #80000 1'b0;
	a4[0] = #160000 1'b1;
end 
// a5[ 4 ]
initial
begin
	a5[4] = 1'b0;
	a5[4] = #160000 1'b1;
	a5[4] = #80000 1'b0;
	a5[4] = #80000 1'b1;
	a5[4] = #80000 1'b0;
	a5[4] = #320000 1'b1;
	a5[4] = #80000 1'b0;
end 
// a5[ 3 ]
initial
begin
	a5[3] = 1'b0;
	a5[3] = #80000 1'b1;
	a5[3] = #80000 1'b0;
	a5[3] = #640000 1'b1;
	a5[3] = #160000 1'b0;
end 
// a5[ 2 ]
initial
begin
	a5[2] = 1'b0;
	a5[2] = #80000 1'b1;
	a5[2] = #80000 1'b0;
	a5[2] = #160000 1'b1;
	a5[2] = #160000 1'b0;
	a5[2] = #160000 1'b1;
	a5[2] = #80000 1'b0;
	a5[2] = #80000 1'b1;
	a5[2] = #80000 1'b0;
	a5[2] = #80000 1'b1;
end 
// a5[ 1 ]
initial
begin
	a5[1] = 1'b0;
	a5[1] = #80000 1'b1;
	a5[1] = #80000 1'b0;
	a5[1] = #80000 1'b1;
	a5[1] = #80000 1'b0;
	a5[1] = #80000 1'b1;
	a5[1] = #80000 1'b0;
	a5[1] = #80000 1'b1;
	a5[1] = #80000 1'b0;
	a5[1] = #80000 1'b1;
	a5[1] = #160000 1'b0;
	a5[1] = #80000 1'b1;
end 
// a5[ 0 ]
initial
begin
	a5[0] = 1'b0;
	a5[0] = #80000 1'b1;
	a5[0] = #80000 1'b0;
	a5[0] = #240000 1'b1;
	a5[0] = #160000 1'b0;
	a5[0] = #80000 1'b1;
	a5[0] = #160000 1'b0;
end 
// b0[ 4 ]
initial
begin
	b0[4] = 1'b0;
	b0[4] = #160000 1'b1;
	b0[4] = #80000 1'b0;
	b0[4] = #80000 1'b1;
	b0[4] = #80000 1'b0;
	b0[4] = #80000 1'b1;
	b0[4] = #80000 1'b0;
	b0[4] = #240000 1'b1;
	b0[4] = #80000 1'b0;
	b0[4] = #80000 1'b1;
end 
// b0[ 3 ]
initial
begin
	b0[3] = 1'b0;
	b0[3] = #400000 1'b1;
	b0[3] = #320000 1'b0;
end 
// b0[ 2 ]
initial
begin
	b0[2] = 1'b0;
	b0[2] = #240000 1'b1;
	b0[2] = #80000 1'b0;
	b0[2] = #160000 1'b1;
	b0[2] = #80000 1'b0;
	b0[2] = #160000 1'b1;
	b0[2] = #80000 1'b0;
	b0[2] = #80000 1'b1;
	b0[2] = #80000 1'b0;
end 
// b0[ 1 ]
initial
begin
	b0[1] = 1'b0;
	b0[1] = #400000 1'b1;
	b0[1] = #80000 1'b0;
	b0[1] = #80000 1'b1;
	b0[1] = #320000 1'b0;
	b0[1] = #80000 1'b1;
end 
// b0[ 0 ]
initial
begin
	b0[0] = 1'b0;
	b0[0] = #80000 1'b1;
	b0[0] = #80000 1'b0;
	b0[0] = #80000 1'b1;
	b0[0] = #640000 1'b0;
	b0[0] = #80000 1'b1;
end 
// b1[ 4 ]
initial
begin
	b1[4] = 1'b0;
	b1[4] = #160000 1'b1;
	b1[4] = #160000 1'b0;
	b1[4] = #160000 1'b1;
	b1[4] = #80000 1'b0;
	b1[4] = #80000 1'b1;
end 
// b1[ 3 ]
initial
begin
	b1[3] = 1'b0;
	b1[3] = #240000 1'b1;
	b1[3] = #80000 1'b0;
	b1[3] = #80000 1'b1;
	b1[3] = #80000 1'b0;
	b1[3] = #320000 1'b1;
	b1[3] = #160000 1'b0;
end 
// b1[ 2 ]
initial
begin
	b1[2] = 1'b0;
	b1[2] = #240000 1'b1;
	b1[2] = #160000 1'b0;
	b1[2] = #80000 1'b1;
	b1[2] = #80000 1'b0;
	b1[2] = #160000 1'b1;
	b1[2] = #80000 1'b0;
	b1[2] = #160000 1'b1;
end 
// b1[ 1 ]
initial
begin
	b1[1] = 1'b0;
	b1[1] = #80000 1'b1;
	b1[1] = #80000 1'b0;
	b1[1] = #80000 1'b1;
	b1[1] = #80000 1'b0;
	b1[1] = #160000 1'b1;
	b1[1] = #80000 1'b0;
	b1[1] = #240000 1'b1;
	b1[1] = #80000 1'b0;
	b1[1] = #80000 1'b1;
end 
// b1[ 0 ]
initial
begin
	b1[0] = 1'b0;
	b1[0] = #80000 1'b1;
	b1[0] = #80000 1'b0;
	b1[0] = #80000 1'b1;
	b1[0] = #160000 1'b0;
	b1[0] = #240000 1'b1;
	b1[0] = #160000 1'b0;
	b1[0] = #160000 1'b1;
end 
// b2[ 4 ]
initial
begin
	b2[4] = 1'b0;
	b2[4] = #80000 1'b1;
	b2[4] = #160000 1'b0;
	b2[4] = #80000 1'b1;
	b2[4] = #80000 1'b0;
	b2[4] = #160000 1'b1;
	b2[4] = #80000 1'b0;
	b2[4] = #80000 1'b1;
	b2[4] = #240000 1'b0;
end 
// b2[ 3 ]
initial
begin
	b2[3] = 1'b0;
	b2[3] = #80000 1'b1;
	b2[3] = #80000 1'b0;
	b2[3] = #160000 1'b1;
	b2[3] = #240000 1'b0;
	b2[3] = #80000 1'b1;
	b2[3] = #160000 1'b0;
	b2[3] = #160000 1'b1;
end 
// b2[ 2 ]
initial
begin
	b2[2] = 1'b0;
	b2[2] = #240000 1'b1;
	b2[2] = #80000 1'b0;
	b2[2] = #80000 1'b1;
	b2[2] = #80000 1'b0;
	b2[2] = #80000 1'b1;
	b2[2] = #160000 1'b0;
	b2[2] = #240000 1'b1;
end 
// b2[ 1 ]
initial
begin
	b2[1] = 1'b0;
	b2[1] = #400000 1'b1;
	b2[1] = #160000 1'b0;
	b2[1] = #80000 1'b1;
	b2[1] = #80000 1'b0;
	b2[1] = #160000 1'b1;
	b2[1] = #80000 1'b0;
end 
// b2[ 0 ]
initial
begin
	b2[0] = 1'b0;
	b2[0] = #320000 1'b1;
	b2[0] = #400000 1'b0;
	b2[0] = #80000 1'b1;
	b2[0] = #80000 1'b0;
	b2[0] = #80000 1'b1;
end 
// b3[ 4 ]
initial
begin
	b3[4] = 1'b0;
	b3[4] = #240000 1'b1;
	b3[4] = #80000 1'b0;
	b3[4] = #480000 1'b1;
end 
// b3[ 3 ]
initial
begin
	b3[3] = 1'b0;
	b3[3] = #80000 1'b1;
	b3[3] = #160000 1'b0;
	b3[3] = #160000 1'b1;
	b3[3] = #160000 1'b0;
	b3[3] = #80000 1'b1;
	b3[3] = #80000 1'b0;
end 
// b3[ 2 ]
initial
begin
	b3[2] = 1'b0;
	b3[2] = #160000 1'b1;
	b3[2] = #160000 1'b0;
	b3[2] = #80000 1'b1;
	b3[2] = #80000 1'b0;
	b3[2] = #80000 1'b1;
	b3[2] = #160000 1'b0;
	b3[2] = #80000 1'b1;
end 
// b3[ 1 ]
initial
begin
	b3[1] = 1'b0;
	b3[1] = #80000 1'b1;
	b3[1] = #160000 1'b0;
	b3[1] = #160000 1'b1;
	b3[1] = #320000 1'b0;
	b3[1] = #240000 1'b1;
end 
// b3[ 0 ]
initial
begin
	b3[0] = 1'b0;
	b3[0] = #80000 1'b1;
	b3[0] = #240000 1'b0;
	b3[0] = #80000 1'b1;
	b3[0] = #320000 1'b0;
end 
// b4[ 4 ]
initial
begin
	b4[4] = 1'b0;
	b4[4] = #80000 1'b1;
	b4[4] = #80000 1'b0;
	b4[4] = #80000 1'b1;
	b4[4] = #240000 1'b0;
	b4[4] = #240000 1'b1;
	b4[4] = #80000 1'b0;
	b4[4] = #80000 1'b1;
end 
// b4[ 3 ]
initial
begin
	b4[3] = 1'b0;
	b4[3] = #160000 1'b1;
	b4[3] = #240000 1'b0;
	b4[3] = #80000 1'b1;
	b4[3] = #160000 1'b0;
	b4[3] = #80000 1'b1;
	b4[3] = #80000 1'b0;
end 
// b4[ 2 ]
initial
begin
	b4[2] = 1'b0;
	b4[2] = #80000 1'b1;
	b4[2] = #240000 1'b0;
	b4[2] = #80000 1'b1;
	b4[2] = #80000 1'b0;
	b4[2] = #160000 1'b1;
	b4[2] = #240000 1'b0;
	b4[2] = #80000 1'b1;
end 
// b4[ 1 ]
initial
begin
	b4[1] = 1'b0;
	b4[1] = #160000 1'b1;
	b4[1] = #80000 1'b0;
	b4[1] = #240000 1'b1;
	b4[1] = #80000 1'b0;
	b4[1] = #400000 1'b1;
end 
// b4[ 0 ]
initial
begin
	b4[0] = 1'b0;
	b4[0] = #160000 1'b1;
	b4[0] = #80000 1'b0;
	b4[0] = #240000 1'b1;
	b4[0] = #80000 1'b0;
	b4[0] = #80000 1'b1;
	b4[0] = #240000 1'b0;
	b4[0] = #80000 1'b1;
end 
// b5[ 4 ]
initial
begin
	b5[4] = 1'b0;
	b5[4] = #640000 1'b1;
	b5[4] = #80000 1'b0;
	b5[4] = #240000 1'b1;
end 
// b5[ 3 ]
initial
begin
	b5[3] = 1'b0;
	b5[3] = #80000 1'b1;
	b5[3] = #160000 1'b0;
	b5[3] = #160000 1'b1;
	b5[3] = #160000 1'b0;
	b5[3] = #320000 1'b1;
end 
// b5[ 2 ]
initial
begin
	b5[2] = 1'b0;
	b5[2] = #80000 1'b1;
	b5[2] = #320000 1'b0;
	b5[2] = #240000 1'b1;
	b5[2] = #160000 1'b0;
	b5[2] = #80000 1'b1;
	b5[2] = #80000 1'b0;
end 
// b5[ 1 ]
initial
begin
	b5[1] = 1'b0;
	b5[1] = #80000 1'b1;
	b5[1] = #400000 1'b0;
	b5[1] = #80000 1'b1;
	b5[1] = #320000 1'b0;
end 
// b5[ 0 ]
initial
begin
	b5[0] = 1'b0;
	b5[0] = #80000 1'b1;
	b5[0] = #240000 1'b0;
	b5[0] = #80000 1'b1;
	b5[0] = #160000 1'b0;
	b5[0] = #80000 1'b1;
	b5[0] = #160000 1'b0;
	b5[0] = #80000 1'b1;
end 

abs_difference_calculator_vlg_sample_tst tb_sample (
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.a4(a4),
	.a5(a5),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.b4(b4),
	.b5(b5),
	.sampler_tx(sampler)
);

abs_difference_calculator_vlg_check_tst tb_out(
	.abs_diff(abs_diff),
	.sampler_rx(sampler)
);
endmodule

